{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "glog-a2b4cb6c-9ead-4722-83ee-4988de8fa787",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strncpy` function in C++ is considered unsafe because it does not guarantee that a null character will be appended at the end of the destination string. This can lead to buffer overflow vulnerabilities if the source string is longer than the destination buffer. In the provided code snippet, `strncpy(row.completionSignal, \"\", 18)`, the function is trying to copy an empty string into `row.completionSignal` with a maximum of 18 characters. This can lead to undefined behavior if `row.completionSignal` is not large enough to hold 18 characters.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer string handling functions that ensure null-termination, such as `strlcpy` or `snprintf`. If `strncpy` must be used, ensure that the destination string is properly null-terminated.\n\n## Source Code Fix Recommendation\n\nHere is a safer alternative using `snprintf`:\n\n```cpp\nsnprintf(row.completionSignal, sizeof(row.completionSignal), \"%s\", \"\");\n```\n\nThis will ensure that `row.completionSignal` is null-terminated.\n\n## Library Dependencies\n\nThe `strncpy` function is part of the C standard library (`<cstring>` in C++), and `snprintf` is part of the C standard I/O library (`<cstdio>` in C++).\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer](https://cwe.mitre.org/data/definitions/119.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS111237"
                ]
              }
            },
            {
              "id": "glog-4ab3239c-a02f-41e4-af79-5948e9c9b6ce",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe vulnerability in question is related to the `malloc` function in C++. `malloc` is a function that dynamically allocates memory at runtime. The vulnerability arises when the size of the memory to be allocated is not properly checked or controlled, leading to potential buffer overflow attacks, memory corruption, or other unexpected behaviors.\n\nIn the provided code snippet, `malloc(16 * 1024)`, the function is allocating 16 kilobytes of memory. If the size of the data that will be stored in this memory exceeds 16 kilobytes, it can lead to buffer overflow, causing the program to crash or behave unexpectedly.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to always check the size of the data that will be stored in the allocated memory and ensure it does not exceed the allocated size. Also, always check the return value of `malloc` to ensure that the memory allocation was successful. If `malloc` fails, it returns a NULL pointer.\n\n## Source Code Fix Recommendation\n\nHere is a simple fix for the provided code snippet:\n\n```cpp\n#include <stdlib.h>\n\n// ...\n\nsize_t size = 16 * 1024;\nvoid* ptr = malloc(size);\n\nif (ptr == NULL) {\n    // Handle malloc failure (e.g., print an error message and exit)\n} else {\n    // Continue with the program\n}\n\n// ...\n\nfree(ptr);  // Don't forget to free the allocated memory when you're done with it\n```\n\n## Library Dependencies\n\nThe `malloc` function is part of the C Standard Library, so you need to include the `stdlib.h` header file.\n\n## References\n\n- [CWE-131: Incorrect Calculation of Buffer Size](https://cwe.mitre.org/data/definitions/131.html)"
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-69aafbb2-c6f9-4cbd-81d8-f93a5cfef5a7",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strncpy` function in C++ is considered unsafe because it does not guarantee that a null character will be appended at the end of the destination string. This can lead to buffer overflow vulnerabilities if the source string is longer than the destination buffer. In the provided code snippet, `strncpy(row.completionSignal, \"\", 18)`, the function is trying to copy an empty string into `row.completionSignal` with a maximum of 18 characters. This can lead to undefined behavior if `row.completionSignal` is not large enough to hold 18 characters.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer string handling functions that ensure null-termination, such as `strlcpy` or `snprintf`. If `strncpy` must be used, ensure that the destination string is properly null-terminated.\n\n## Source Code Fix Recommendation\n\nHere is a safer alternative using `snprintf`:\n\n```cpp\nsnprintf(row.completionSignal, sizeof(row.completionSignal), \"%s\", \"\");\n```\n\nThis will ensure that `row.completionSignal` is null-terminated.\n\n## Library Dependencies\n\nThe `strncpy` function is part of the C standard library (`<cstring>` in C++), and `snprintf` is part of the C standard I/O library (`<cstdio>` in C++).\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer](https://cwe.mitre.org/data/definitions/119.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS111237"
                ]
              }
            },
            {
              "id": "glog-4afe2576-edf2-461d-9f4f-a7aaa8c08528",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strncpy` function in C++ is considered unsafe because it does not guarantee that a null character will be appended at the end of the destination string. This can lead to buffer overflow vulnerabilities if the source string is longer than the destination buffer. In the provided code snippet, `strncpy(row.completionSignal, \"\", 18)`, the function is trying to copy an empty string into `row.completionSignal` with a maximum of 18 characters. This can lead to undefined behavior if `row.completionSignal` is not large enough to hold 18 characters.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer string handling functions that ensure null-termination, such as `strlcpy` or `snprintf`. If `strncpy` must be used, ensure that the destination string is properly null-terminated.\n\n## Source Code Fix Recommendation\n\nHere is a safer alternative using `snprintf`:\n\n```cpp\nsnprintf(row.completionSignal, sizeof(row.completionSignal), \"%s\", \"\");\n```\n\nThis will ensure that `row.completionSignal` is null-terminated.\n\n## Library Dependencies\n\nThe `strncpy` function is part of the C standard library (`<cstring>` in C++), and `snprintf` is part of the C standard I/O library (`<cstdio>` in C++).\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer](https://cwe.mitre.org/data/definitions/119.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS111237"
                ]
              }
            },
            {
              "id": "glog-4bae4b1f-b9d2-4fa2-bee5-41e1edb0f597",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strncpy` function in C++ is considered unsafe because it does not guarantee that a null character will be appended at the end of the destination string. This can lead to buffer overflow vulnerabilities if the source string is longer than the destination buffer. In the provided code snippet, `strncpy(row.completionSignal, \"\", 18)`, the function is trying to copy an empty string into `row.completionSignal` with a maximum of 18 characters. This can lead to undefined behavior if `row.completionSignal` is not large enough to hold 18 characters.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer string handling functions that ensure null-termination, such as `strlcpy` or `snprintf`. If `strncpy` must be used, ensure that the destination string is properly null-terminated.\n\n## Source Code Fix Recommendation\n\nHere is a safer alternative using `snprintf`:\n\n```cpp\nsnprintf(row.completionSignal, sizeof(row.completionSignal), \"%s\", \"\");\n```\n\nThis will ensure that `row.completionSignal` is null-terminated.\n\n## Library Dependencies\n\nThe `strncpy` function is part of the C standard library (`<cstring>` in C++), and `snprintf` is part of the C standard I/O library (`<cstdio>` in C++).\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer](https://cwe.mitre.org/data/definitions/119.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS111237"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "glog-a2b4cb6c-9ead-4722-83ee-4988de8fa787",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "\"Detected Use of Prohibited C Function (strncpy)\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "rpd_tracer/CuptiDataSource.cpp"
                },
                "region": {
                  "startLine": 688,
                  "startColumn": 28,
                  "endLine": 688,
                  "endColumn": 65,
                  "charOffset": 34563,
                  "charLength": 37,
                  "snippet": {
                    "text": "strncpy(row.completionSignal, \"\", 18)",
                    "rendered": {
                      "text": "strncpy(row.completionSignal, \"\", 18)",
                      "markdown": "`strncpy(row.completionSignal, \"\", 18)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "strncpy is dangerous, as if the source contains 'n' or more characters, it will not null terminate the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "rpd_tracer/CuptiDataSource.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 34563,
                        "charLength": 37
                      },
                      "insertedContent": {
                        "text": "strcpy_s(row.completionSignal,  18,  \"\")"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "strncpy is dangerous, as if the source contains 'n' or more characters, it will not null terminate the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "rpd_tracer/CuptiDataSource.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 34563,
                        "charLength": 37
                      },
                      "insertedContent": {
                        "text": "strlcpy(row.completionSignal,  \"\",  18)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "glog-4ab3239c-a02f-41e4-af79-5948e9c9b6ce",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Detected Vulnerability in C Function (malloc)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "rpd_tracer/CuptiDataSource.cpp"
                },
                "region": {
                  "startLine": 655,
                  "startColumn": 24,
                  "endLine": 655,
                  "endColumn": 41,
                  "charOffset": 33209,
                  "charLength": 17,
                  "snippet": {
                    "text": "malloc(16 * 1024)",
                    "rendered": {
                      "text": "malloc(16 * 1024)",
                      "markdown": "`malloc(16 * 1024)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "rpd_tracer/CuptiDataSource.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 33209,
                        "charLength": 17
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-69aafbb2-c6f9-4cbd-81d8-f93a5cfef5a7",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "\"Detected Use of Prohibited C Function (strncpy)\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "rpd_tracer/CuptiDataSource.cpp"
                },
                "region": {
                  "startLine": 722,
                  "startColumn": 28,
                  "endLine": 722,
                  "endColumn": 65,
                  "charOffset": 36701,
                  "charLength": 37,
                  "snippet": {
                    "text": "strncpy(row.completionSignal, \"\", 18)",
                    "rendered": {
                      "text": "strncpy(row.completionSignal, \"\", 18)",
                      "markdown": "`strncpy(row.completionSignal, \"\", 18)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "strncpy is dangerous, as if the source contains 'n' or more characters, it will not null terminate the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "rpd_tracer/CuptiDataSource.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 36701,
                        "charLength": 37
                      },
                      "insertedContent": {
                        "text": "strcpy_s(row.completionSignal,  18,  \"\")"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "strncpy is dangerous, as if the source contains 'n' or more characters, it will not null terminate the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "rpd_tracer/CuptiDataSource.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 36701,
                        "charLength": 37
                      },
                      "insertedContent": {
                        "text": "strlcpy(row.completionSignal,  \"\",  18)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "glog-4afe2576-edf2-461d-9f4f-a7aaa8c08528",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "\"Detected Use of Prohibited C Function (strncpy)\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "rpd_tracer/RoctracerDataSource.cpp"
                },
                "region": {
                  "startLine": 874,
                  "startColumn": 12,
                  "endLine": 874,
                  "endColumn": 49,
                  "charOffset": 45533,
                  "charLength": 37,
                  "snippet": {
                    "text": "strncpy(row.completionSignal, \"\", 18)",
                    "rendered": {
                      "text": "strncpy(row.completionSignal, \"\", 18)",
                      "markdown": "`strncpy(row.completionSignal, \"\", 18)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "strncpy is dangerous, as if the source contains 'n' or more characters, it will not null terminate the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "rpd_tracer/RoctracerDataSource.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 45533,
                        "charLength": 37
                      },
                      "insertedContent": {
                        "text": "strcpy_s(row.completionSignal,  18,  \"\")"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "strncpy is dangerous, as if the source contains 'n' or more characters, it will not null terminate the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "rpd_tracer/RoctracerDataSource.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 45533,
                        "charLength": 37
                      },
                      "insertedContent": {
                        "text": "strlcpy(row.completionSignal,  \"\",  18)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "glog-4bae4b1f-b9d2-4fa2-bee5-41e1edb0f597",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "\"Detected Use of Prohibited C Function (strncpy)\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "rpd_tracer/CuptiDataSource.cpp"
                },
                "region": {
                  "startLine": 704,
                  "startColumn": 28,
                  "endLine": 704,
                  "endColumn": 65,
                  "charOffset": 35541,
                  "charLength": 37,
                  "snippet": {
                    "text": "strncpy(row.completionSignal, \"\", 18)",
                    "rendered": {
                      "text": "strncpy(row.completionSignal, \"\", 18)",
                      "markdown": "`strncpy(row.completionSignal, \"\", 18)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "strncpy is dangerous, as if the source contains 'n' or more characters, it will not null terminate the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "rpd_tracer/CuptiDataSource.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 35541,
                        "charLength": 37
                      },
                      "insertedContent": {
                        "text": "strcpy_s(row.completionSignal,  18,  \"\")"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "strncpy is dangerous, as if the source contains 'n' or more characters, it will not null terminate the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "rpd_tracer/CuptiDataSource.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 35541,
                        "charLength": 37
                      },
                      "insertedContent": {
                        "text": "strlcpy(row.completionSignal,  \"\",  18)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}